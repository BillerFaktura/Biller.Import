<?xml version="1.0"?>
<doc>
<assembly>
<name>
FuncClasses
</name>
</assembly>
<members>
<member name="M:FuncClasses.DBRepairWizard.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:FuncClasses.DBRepairWizard">
	<summary>
DBRepairWizard
</summary>
</member><member name="M:FuncClasses.Customer.#ctor(System.Boolean,System.Collections.ObjectModel.Collection{FuncClasses.CustomerPreviewModel})">
	<summary>
 Erstellt eine Instanz zum Erstellen eines neuen Kunden
 </summary>
	<remarks></remarks>
</member><member name="P:FuncClasses.Customer.IsCompany">
	<summary>
 Determines wheter the Customer is a company (for b2b) or a private person
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Statistics.CustomerValueModel.Value">
	<summary>
 Returns the value connected to the specified date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Statistics.CustomerValueModel.CustomerName">
	<summary>
 CustomerID as String
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.Statistics.CustomerValueModel.CalcPercent(System.Double,System.String)">
	<summary>
 Set the percentage of the objects value based on the total value. Default stringformat is "0,00 %"
 </summary>
	<remarks></remarks>
</member><member name="P:FuncClasses.OrderedArticle.NetOrderValue">
	<summary>
 Returns price X amount without taxes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.OrderedArticle.GrossOrderValue">
	<summary>
 Returns price X amount with taxes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.OrderedArticle.NetValue">
	<summary>
 Returns price without discount and without tax
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.OrderedArticle.GrossValue">
	<summary>
 Returns price without discount and with tax
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Address.CompanyName">
	<summary>
 This value is shown, if the property "IsCompany" inside the customer class is set to "True"
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.DBRepairWizard.Button1_Click(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 Next Button
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.Statistics.ArticleStats.GetMostBoughtArticlesAsync(System.DateTime,System.DateTime)">
	<summary>
 Gets the most bought articles in the given time intervall. Calls the "GetMostBoughtArticlesCompleted"-Event
 </summary>
	<param name="startdate"></param>
	<param name="enddate"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.Statistics.ArticleStats.GetMostBoughhtArticlesAsync(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime)">
	<summary>
 Calculates the most bought articles in the filter. Calls the "GetMostBoughtArticlesCompleted"-Event
 </summary>
	<param name="articles">The articles you want values for</param>
	<param name="startdate"></param>
	<param name="enddate"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.FluentNHibernateConnector.#ctor(System.String,System.String,System.String,System.String,System.String,System.Windows.Threading.Dispatcher,System.String)">
	<summary>
 Creates a new instance of the class
 </summary>
	<param name="appid">Unique App-ID</param>
	<param name="_dbServer">Serveraddress</param>
	<param name="_dbName">Databasename</param>
	<param name="_dbUsername">Database-Username</param>
	<param name="_dbPasswd">Database-Password</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.FluentNHibernateConnector.#ctor(System.String,System.String,System.Windows.Threading.Dispatcher,System.String)">
	<summary>
 Creates a new instance of the class
 </summary>
	<param name="appid"></param>
	<param name="directory"></param>
	<param name="dp"></param>
	<param name="type"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.AddUnit(FuncClasses.Unit)">
	<summary>
 Saves a new Unit into the XML-Database
 </summary>
	<param name="Unit">The Unit you want to save</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.SaveSetting(System.String,System.String,System.Xml.XmlDocument@)">
	<summary>
 Doc is an reference. You have to save it on your own after methode is passed
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="doc"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.GetArticle(System.String,FuncClasses.User)">
	<summary>
 Gibt den gesamten Artikel unter der gegebenen Artikelnummer zurück
 </summary>
	<param name="ArtikelNummer">Artikelnummer des gesuchten Artikels</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.GetAllArticles(FuncClasses.User)">
	<summary>
 Gibt alle Artikel in der Datenbank in einer Collection zurück
 </summary>
	<returns>Gibt den Typ Artikel in einer Collection zurück</returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.ExistsArticle(System.String,FuncClasses.User)">
	<summary>
 Prüft, ob die gegebene Artikelnummer schon in der Datenbank vorhanden ist.
 </summary>
	<param name="ArtikelNummer">Artikelnummer, die es zu prüfen gilt</param>
	<returns>Gibt True zurück, falls ein Artikel vorhanden ist</returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.SetArticle(FuncClasses.Article,FuncClasses.User)">
	<summary>
 Speichert den gegebenen Artikel in der Datenbank
 </summary>
	<param name="artikel">Ein Objekt des Typs Artikel</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.GetOrder(System.String,FuncClasses.Dokumentart,FuncClasses.User)">
	<summary>
 Gibt einen spezifischen Auftrag zurück
 </summary>
	<param name="AuftragsNummer">Die Auftragsnummer des Auftrags</param>
	<param name="Dokumenttyp">Der Dokumenttyp</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.GetAuftragArticlesByXmlNode(System.Xml.XmlElement)">
	<summary>
 Method to load Articledata into an new instance from Auftrag from an existing xmlnode
 </summary>
	<param name="item"></param>
	<returns></returns>
	<remarks>This method does not set the customer!</remarks>
</member><member name="M:FuncClasses.FastXML.SetOrder(FuncClasses.Order,FuncClasses.User)">
	<summary>
 Speichert den übergebenen Auftrag unter der gegebenen laufenden Nummer und dem Dokumenttyp ab
 </summary>
	<param name="auftrag">Ein Objekt des Typs Auftrag</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.GetCustomer(System.String,FuncClasses.User)">
	<summary>
 Gibt einen bestimmten Kunden unter der überführten Kundennummer zurück
 </summary>
	<param name="KundenNummer">Die Kundennummer des gesuchten Kunden</param>
	<returns>Gibt ein Objekt des Typs Kunde zurück</returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.ExistsCustomer(System.String,FuncClasses.User)">
	<summary>
 Prüft, ob ein Kunde unter der übergebenen Kundennummer angelegt ist.
 </summary>
	<param name="Kundennummer">Zu überprüfende Kundennummer</param>
	<returns>True falls ein Kunde unter dieser Nummer schon existiert</returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.SetCustomer(FuncClasses.Customer,FuncClasses.User)">
	<summary>
 Speichert den eingegebenen Kunden in der Datenbank ab
 </summary>
	<param name="Customer">Objekt des Typs Kunde</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.FastXML.SaveTemps(System.Collections.Generic.IList{FuncClasses.Order},System.Collections.Generic.IList{FuncClasses.Customer},System.Collections.Generic.IList{FuncClasses.Article},FuncClasses.User)">
	<summary>
 Methode to save open orders, costumers and articles to load them on the next programm start
 </summary>
	<param name="Orders">The open orders</param>
	<param name="Customers">The open orders</param>
	<param name="Articles"></param>
	<remarks></remarks>
</member><member name="T:FuncClasses.FastXML">
	<summary>
 XML Database and Settings Parser
 Version 2.0
 </summary>
	<remarks></remarks>
</member><member name="F:FuncClasses.Bn.Classes.FileDownloader.FileInfo.Path">
	<summary>The complete path of the file (directory + filename)</summary>
</member><member name="F:FuncClasses.Bn.Classes.FileDownloader.FileInfo.Name">
	<summary>The name of the file</summary>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.FileInfo.#ctor(System.String)">
	<summary>Create a new instance of FileInfo</summary>
	<param name="path">The complete path of the file (directory + filename)</param>
</member><member name="T:FuncClasses.Bn.Classes.FileDownloader.FileInfo">
	<summary>Simple structure for managing file info</summary>
</member><member name="T:FuncClasses.Bn.Classes.FileDownloader.Event">
	<summary>Holder for events that are triggered in the background worker but need to be fired in the main thread</summary>
</member><member name="T:FuncClasses.Bn.Classes.FileDownloader.InvokeType">
	<summary>Holder for the action that needs to be invoked</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.Started">
	<summary>Occurs when the file downloading has started</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.Paused">
	<summary>Occurs when the file downloading has been paused</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.Resumed">
	<summary>Occurs when the file downloading has been resumed</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.CancelRequested">
	<summary>Occurs when the user has requested to cancel the downloads</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.DeletingFilesAfterCancel">
	<summary>Occurs when the user has requested to cancel the downloads and the cleanup of the downloaded files has started</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.Canceled">
	<summary>Occurs when the file downloading has been canceled by the user</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.Completed">
	<summary>Occurs when the file downloading has been completed (without canceling it)</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.Stopped">
	<summary>Occurs when the file downloading has been stopped by either cancellation or completion</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.IsBusyChanged">
	<summary>Occurs when the busy state of the FileDownloader has changed</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.IsPausedChanged">
	<summary>Occurs when the pause state of the FileDownloader has changed</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.StateChanged">
	<summary>Occurs when the either the busy or pause state of the FileDownloader have changed</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.CalculationFileSizesStarted">
	<summary>Occurs when the calculation of the file sizes has started</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.CalculatingFileSize">
	<summary>Occurs when the calculation of the file sizes has started</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.FileSizesCalculationComplete">
	<summary>Occurs when the calculation of the file sizes has been completed</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.FileDownloadAttempting">
	<summary>Occurs when the FileDownloader attempts to get a web response to download the file</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.FileDownloadStarted">
	<summary>Occurs when a file download has started</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.FileDownloadStopped">
	<summary>Occurs when a file download has stopped</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.FileDownloadSucceeded">
	<summary>Occurs when a file download has been completed successfully</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.FileDownloadFailed">
	<summary>Occurs when a file download has been completed unsuccessfully</summary>
</member><member name="E:FuncClasses.Bn.Classes.FileDownloader.ProgressChanged">
	<summary>Occurs every time a block of data has been downloaded</summary>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.#ctor(System.Boolean)">
	<summary>Create a new instance of a FileDownloader</summary>
	<param name="supportsProgress">Optional. Boolean. Should the FileDownloader support total progress statistics?</param>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.Start">
	<summary>Start the downloads</summary>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.Pause">
	<summary>pause the downloads</summary>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.Resume">
	<summary>Resume the downloads</summary>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.Stop">
	<summary>Stop the downloads</summary>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.Stop(System.Boolean)">
	<summary>Stop the downloads</summary>
	<param name="deleteCompletedFiles">Required. Boolean. Indicates wether the complete downloads should be deleted</param>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.Dispose">
	<summary>Release the recources held by the FileDownloader</summary>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.FormatSizeBinary(System.Int64,System.Int32)">
	<summary>Format an amount of bytes to a more readible notation with binary notation symbols</summary>
	<param name="size">Required. Int64. The raw amount of bytes</param>
	<param name="decimals">Optional. Int32. The amount of decimals you want to have displayed in the notation</param>
</member><member name="M:FuncClasses.Bn.Classes.FileDownloader.FormatSizeDecimal(System.Int64,System.Int32)">
	<summary>Format an amount of bytes to a more readible notation with decimal notation symbols</summary>
	<param name="size">Required. Int64. The raw amount of bytes</param>
	<param name="decimals">Optional. Int32. The amount of decimals you want to have displayed in the notation</param>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.Files">
	<summary>Gets or sets the list of files to download</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.LocalDirectory">
	<summary>Gets or sets the local directory in which files will be stored</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.SupportsProgress">
	<summary>Gets or sets if the FileDownloader should support total progress statistics. Note that when enabled, the FileDownloader will have to get the size of each file before starting to download them, which can delay the operation.</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.DeleteCompletedFilesAfterCancel">
	<summary>Gets or sets if when the download process is cancelled the complete downloads should be deleted</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.PackageSize">
	<summary>Gets or sets the size of the blocks that will be downloaded</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.StopWatchCyclesAmount">
	<summary>Gets or sets the amount of blocks that need to be downloaded before the progress speed is re-calculated. Note: setting this to a low value might decrease the accuracy</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.IsBusy">
	<summary>Gets or sets the busy state of the FileDownloader</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.IsPaused">
	<summary>Gets or sets the pause state of the FileDownloader</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.CanStart">
	<summary>Gets if the FileDownloader can start</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.CanPause">
	<summary>Gets if the FileDownloader can pause</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.CanResume">
	<summary>Gets if the FileDownloader can resume</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.CanStop">
	<summary>Gets if the FileDownloader can stop</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.TotalSize">
	<summary>Gets the total size of all files together. Only avaible when the FileDownloader suports progress</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.TotalProgress">
	<summary>Gets the total amount of bytes downloaded</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.CurrentFileProgress">
	<summary>Gets the amount of bytes downloaded of the current file</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.TotalPercentage(System.Int32)">
	<summary>Gets the total download percentage. Only avaible when the FileDownloader suports progress</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.CurrentFilePercentage(System.Int32)">
	<summary>Gets the percentage of the current file progress</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.DownloadSpeed">
	<summary>Gets the current download speed in bytes</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.CurrentFile">
	<summary>Gets the FileInfo object representing the current file</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.CurrentFileSize">
	<summary>Gets the size of the current file in bytes</summary>
</member><member name="P:FuncClasses.Bn.Classes.FileDownloader.HasBeenCanceled">
	<summary>Gets if the last download was canceled by the user</summary>
</member><member name="T:FuncClasses.Bn.Classes.FileDownloader">
	<summary>Class for downloading files in the background that supports info about their progress, the total progress, cancellation, pausing, and resuming. The downloads will run on a separate thread so you don't have to worry about multihreading yourself. </summary>
	<remarks>Class FileDownloader v1.0.3, by De Dauw Jeroen - May 2009</remarks>
</member><member name="P:FuncClasses.nHibernate.Models.OrderedArticleModel.OrderArticleID">
	<summary>
 The GUID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.nHibernate.Models.OrderedArticleModel.Article">
	<summary>
 The original articleid
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:FuncClasses.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:FuncClasses.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:FuncClasses.Statistics.CompanyStats.GetCustomerSalesListAsync(System.DateTime,System.DateTime)">
	<summary>
  Creates the sales list from the given start- and enddate. The list is sorted by the biggest amount
 </summary>
	<param name="startdate">From where you want to calculate the list</param>
	<param name="enddate">To where you want to calculate the list</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.Statistics.CompanyStats.GetCustomerSalesListCurrentYearAsync">
	<summary>
 Creates the sales list from the 1st january to the 31st december of the current year. The list is sorted by the biggest amount
 </summary>
	<remarks></remarks>
</member><member name="P:FuncClasses.Article.ArticlePrice1">
	<summary>
 Represents 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:FuncClasses.Article">
	<summary>
 Stellt eine Hilfklasse für einen bestehenden oder neuen Artikel dar
 </summary>
	<remarks></remarks>
</member><member name="P:FuncClasses.UpdateFileInfo.Description">
	<summary>
 Returns the Name of the Programmpart (e.g. the Layoutname or Pluginname)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.ArticleAmountModel.Amount">
	<summary>
 How many units were saled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.ArticleAmountModel.Proceeds">
	<summary>
 How much money you gained from it
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.BackupAndRestore.Wiederherstellen(System.String,System.String)">
	<summary>
 Stellt die Dateien aus einer Sicherung wieder her
 </summary>
	<param name="sourcefile">Quell-ZipDatei</param>
	<param name="targetDir">Zielverzeichnis</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.Connect">
	<summary>
 A instance should not automatically connect to its database. To ensure correct eventhandling the programmer has to call this methode.
 Best the instructions inside are done on a seperate thread so the UI does not freeze. Call the event "DatabaseConnected" if finished
 </summary>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.Backup">
	<summary>
 Creates a backup of the database in the specified directory. Returns the filename of the backupfile.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.Restore">
	<summary>
 Restores the data specified by the file parameter. Returns if the restore process was successfull
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.IDatabase.LastCompany">
	<summary>
 Gets or sets the company's name who was used last
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.IDatabase.TaxDescription">
	<summary>
 Gets or sets the name of the prefered tax name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.IDatabase.ListOfTaxes">
	<summary>
 Gets a collection which contains all tax classes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.IDatabase.ListOfUnits">
	<summary>
 Gets a collection which contains all units
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.IDatabase.ListOfPaymentMethodes">
	<summary>
 Gets a collection which contains all payment methodes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.IDatabase.ListOfOrderTexts">
	<summary>
 Gets a collection which contains all predefined order texts
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.IDatabase.LastCustomLayout">
	<summary>
 Gets or sets the name of the last used export layout
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.GetSettingByKey(System.String)">
	<summary>
 Gets value from xml containing the globalsettings
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.SetSettingByKey(System.String,System.String)">
	<summary>
 Sets the value according to the key in the globalsettings file. If key does not exist, it will be created.
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.SaveOrUpdateTax(FuncClasses.TaxClass)">
	<summary>
 Adds a new tax class (does not overwrite an old one)
 </summary>
	<param name="Tax"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.SaveOrUpdateUnit(FuncClasses.Unit)">
	<summary>
 Adds or updates a unit. The identifier is the unit's property "Name"
 </summary>
	<param name="Unit"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.SaveOrUpdatePaymentMethode(FuncClasses.PaymentMethode)">
	<summary>
 Adds or updates a payment methode. The identifier is the payment methode's property "Name"
 </summary>
	<param name="Zahlung"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.SaveOrUpdateOrderText(FuncClasses.nHibernate.Models.OrderTextModel)">
	<summary>
 Adds or updates an order text. The identifier is property "Name"
 </summary>
	<param name="current"></param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.GetArticle(System.String,FuncClasses.User)">
	<summary>
 Gets the article defined by the given article ID
 </summary>
	<param name="ArticleID">The unique identifier of the article. If article does not exist, the function returns an empty instance</param>
	<param name="usr">The actual user instance</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.GetAllArticles(FuncClasses.User)">
	<summary>
 Gets a list of all article entries as ArticlePreviewModel (It just contains the values you see in the UI)
 </summary>
	<param name="usr">The actual user instance</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.ArticleExists(System.String,FuncClasses.User)">
	<summary>
 Checks if the article with the defined article ID exists
 </summary>
	<param name="ArticleID">The unique identifier of the article</param>
	<param name="usr">The actual user instance</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.DeleteArticle(System.String,FuncClasses.User)">
	<summary>
 Deletes an article based on the defined article ID
 </summary>
	<param name="ArticleID"></param>
	<param name="usr">The actual user instance</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.SaveOrUpdateArticle(FuncClasses.Article,FuncClasses.User)">
	<summary>
 Saves or updates the defined article.
 </summary>
	<param name="article">The article instance you want to save</param>
	<param name="usr">The actual user instance</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.GetOrder(System.String,FuncClasses.Dokumentart,FuncClasses.User)">
	<summary>
 Gets the order defined by the order ID and the document type
 </summary>
	<param name="OrderID"></param>
	<param name="type"></param>
	<param name="usr">The actual user instance</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.GetAllOrders(FuncClasses.User)">
	<summary>
 Gets a list of all orders as OrderPreviewModel (it just contains the values you see in the UI)
 </summary>
	<param name="usr">The actual user instance</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.GetOrdersInInterval(System.DateTime,System.DateTime,FuncClasses.User)">
	<summary>
 Get a list of all orders inside the interval defined by "startdate" and "enddate". The list contains "OrderPreviewModel" instances
 </summary>
	<param name="startdate"></param>
	<param name="enddate"></param>
	<param name="usr">The actual user instance</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.GetOrdersByCustomer(System.String,FuncClasses.User,System.DateTime,System.DateTime)">
	<summary>
 Get a list of all orders by a customer. You can also set an interval with "startdate" and "enddate". The list contains "OrderPreviewModel" instances
 </summary>
	<param name="CustomerID"></param>
	<param name="usr">The actual user instance</param>
	<param name="startdate"></param>
	<param name="enddate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.OrderExists(System.String,FuncClasses.Dokumentart,FuncClasses.User)">
	<summary>
 Checks if the order with the defined values exists
 </summary>
	<param name="OrderID"></param>
	<param name="type"></param>
	<param name="usr">The actual user instance</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.DeleteOrder(System.String,FuncClasses.Dokumentart,FuncClasses.User)">
	<summary>
 Deletes the order by the defined values
 </summary>
	<param name="OrderID"></param>
	<param name="type"></param>
	<param name="usr">The actual user instance</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.SaveOrUpdateOrder(FuncClasses.Order,FuncClasses.User)">
	<summary>
 Saves or updates the defined order
 </summary>
	<param name="order"></param>
	<param name="usr">The actual user instance</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.GetCustomer(System.String,FuncClasses.User)">
	<summary>
 Gets the customer with defined customer ID
 </summary>
	<param name="CustomerID"></param>
	<param name="usr"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.GetAllCustomers(FuncClasses.User)">
	<summary>
 Returns a list with all customers as "CustomerPreviewModel" (Just contains values for the UI).
 </summary>
	<param name="usr">The actual user instance</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.CustomerExists(System.String,FuncClasses.User)">
	<summary>
 Checks if the customer with the defined customer ID exists.
 </summary>
	<param name="CustomerID"></param>
	<param name="usr">The actual user instance</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.DeleteCustomer(System.String,FuncClasses.User)">
	<summary>
 Deletes the customer with the defined customer ID
 </summary>
	<param name="CustomerID"></param>
	<param name="usr">The actual user instance</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.IDatabase.SaveOrUpdateCustomer(FuncClasses.Customer,FuncClasses.User)">
	<summary>
 Adds or update the given customer
 </summary>
	<param name="customer"></param>
	<param name="usr">The actual user instance</param>
	<remarks></remarks>
</member><member name="E:FuncClasses.IDatabase.DatabaseConnected">
	<summary>
 This Event is not threadsafe!
 </summary>
	<remarks></remarks>
</member><member name="E:FuncClasses.IDatabase.DatabaseNotConnected">
	<summary>
 This Event is not threadsafe!
 </summary>
	<remarks></remarks>
</member><member name="M:FuncClasses.Order.#ctor(System.Collections.ObjectModel.Collection{FuncClasses.OrderPreviewModel}@,FuncClasses.Dokumentart)">
	<summary>
 Methode zum Erstellen eines neuen Auftrags
 </summary>
	<param name="Auftragstyp">Die gewünschte Auftragsart. Standard ist Rechnung</param>
	<remarks></remarks>
</member><member name="M:FuncClasses.Order.#ctor">
	<summary>
 Methode zum Erstellen eines neuen Auftrags
 </summary>
	<remarks>Nur zum erstellen einer Liste aus der XML-Datei!!</remarks>
</member><member name="P:FuncClasses.Order.Reduction">
	<summary>
 Substracts a fixed amount 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.Customer">
	<summary>
 The selected customer to this order
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.OrderID">
	<summary>
 Generates a unique ID in combination with the document type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.DokumentArt">
	<summary>
 Represents the kind of order. Together with LaufendeNummer it represents a unique combination
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.Datum">
	<summary>
 Das Auftragsdatum
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.TotalValue">
	<summary>
 Returns the total order value with taxes and discounts and skonto
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.LinkedToCredit">
	<summary>
 Wenn der Auftrag weitergeführt wurde oder ein weiterführender Auftrag ist, wird dessen Nummer als String gespeichert
 </summary>
	<value>Kennung / Nummer des Auftrags</value>
	<returns>Kennung / Nummer des Auftrags</returns>
	<remarks>Den Auftrag an sich muss man mit einer Instanz von FastXML oder XMLHelper noch laden</remarks>
</member><member name="P:FuncClasses.Order.LinkedToOffer">
	<summary>
 Wenn der Auftrag weitergeführt wurde oder ein weiterführender Auftrag ist, wird dessen Nummer als String gespeichert
 </summary>
	<value>Kennung / Nummer des Auftrags</value>
	<returns>Kennung / Nummer des Auftrags</returns>
	<remarks>Den Auftrag an sich muss man mit einer Instanz von FastXML oder XMLHelper noch laden</remarks>
</member><member name="P:FuncClasses.Order.LinkedToInvoice">
	<summary>
 Wenn der Auftrag weitergeführt wurde oder ein weiterführender Auftrag ist, wird dessen Nummer als String gespeichert
 </summary>
	<value>Kennung / Nummer des Auftrags</value>
	<returns>Kennung / Nummer des Auftrags</returns>
	<remarks>Den Auftrag an sich muss man mit einer Instanz von FastXML oder XMLHelper noch laden</remarks>
</member><member name="P:FuncClasses.Order.LinkedToDelivery">
	<summary>
 Wenn der Auftrag weitergeführt wurde oder ein weiterführender Auftrag ist, wird dessen Nummer als String gespeichert
 </summary>
	<value>Kennung / Nummer des Auftrags</value>
	<returns>Kennung / Nummer des Auftrags</returns>
	<remarks>Den Auftrag an sich muss man mit einer Instanz von FastXML oder XMLHelper noch laden</remarks>
</member><member name="P:FuncClasses.Order.LinkedFromCredit">
	<summary>
 Wenn der Auftrag weitergeführt wurde oder ein weiterführender Auftrag ist, wird dessen Nummer als String gespeichert
 </summary>
	<value>Kennung / Nummer des Auftrags</value>
	<returns>Kennung / Nummer des Auftrags</returns>
	<remarks>Den Auftrag an sich muss man mit einer Instanz von FastXML oder XMLHelper noch laden</remarks>
</member><member name="P:FuncClasses.Order.LinkedFromOffer">
	<summary>
 Wenn der Auftrag weitergeführt wurde oder ein weiterführender Auftrag ist, wird dessen Nummer als String gespeichert
 </summary>
	<value>Kennung / Nummer des Auftrags</value>
	<returns>Kennung / Nummer des Auftrags</returns>
	<remarks>Den Auftrag an sich muss man mit einer Instanz von FastXML oder XMLHelper noch laden</remarks>
</member><member name="P:FuncClasses.Order.LinkedFromInvoice">
	<summary>
 Wenn der Auftrag weitergeführt wurde oder ein weiterführender Auftrag ist, wird dessen Nummer als String gespeichert
 </summary>
	<value>Kennung / Nummer des Auftrags</value>
	<returns>Kennung / Nummer des Auftrags</returns>
	<remarks>Den Auftrag an sich muss man mit einer Instanz von FastXML oder XMLHelper noch laden</remarks>
</member><member name="P:FuncClasses.Order.LinkedFromDelivery">
	<summary>
 Wenn der Auftrag weitergeführt wurde oder ein weiterführender Auftrag ist, wird dessen Nummer als String gespeichert
 </summary>
	<value>Kennung / Nummer des Auftrags</value>
	<returns>Kennung / Nummer des Auftrags</returns>
	<remarks>Den Auftrag an sich muss man mit einer Instanz von FastXML oder XMLHelper noch laden</remarks>
</member><member name="P:FuncClasses.Order.OrderValue">
	<summary>
 Returns the Field "TotalValue"
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.GoodValue">
	<summary>
 Returns the Field "GoodValue"
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.NetValue">
	<summary>
 Without taxes (without discount ...). Complete article value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.GrossValue">
	<summary>
 With taxes (without discount ...). Complete article value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.TotalValueWithoutSkonto">
	<summary>
 Returns the total order value with taxes and discounts without skonto
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.SkontoValue">
	<summary>
 Returns the Skonto Value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.RebateValue">
	<summary>
 Absolute amount of the rebate based on "GrossValueWithoutSupplementary"
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.NetValueWithoutSupplementary">
	<summary>
 Without taxes (without discount and supplementary work ...). Complete article value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.GrossValueWithoutSupplementary">
	<summary>
 With taxes (without discount and supplementary work...). Complete article value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.Order.TotalValueWithoutSkontoFromNet">
	<summary>
 Returns the total order value with taxes and discounts without skonto. Use this, if you have a net invoice
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.Statistics.CustomerStats.GetMonthlySalesAsync(System.String,System.DateTime,System.DateTime)">
	<summary>
	</summary>
	<param name="customerid"></param>
	<remarks></remarks>
</member><member name="P:FuncClasses.DateValueModel.Date_">
	<summary>
 Specifices date of the entry
 undetermined values are set to 0
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:FuncClasses.DateValueModel.Value">
	<summary>
 Returns the value connected to the specified date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:FuncClasses.DateValueModel.Percent(System.Double,System.String)">
	<summary>
 Returns the percentage of the objects value on the total value. Default stringformat is "0,00 %"
 </summary>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>